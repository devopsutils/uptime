service:
  name: uptime

custom:
  uptime:
    prefix: ${self:service}-${self:provider.stage}
    privacy: ${opt:privacy, 'public'}
    vpc: ${opt:vpc, ''}
    deletionPolicy:
      dev: Delete
      prod: Retain
    servicesTable:
      name: ${self:custom.uptime.prefix}-services
      throughput: 5
      deletionPolicy: ${self:custom.uptime.deletionPolicy.${self:provider.stage}}
    metricsTable:
      name: ${self:custom.uptime.prefix}-metrics
      throughput: 5
      deletionPolicy: ${self:custom.uptime.deletionPolicy.${self:provider.stage}}
  webpack:
    webpackConfig: ./src/app/webpack.config.js
    keepOutputDirectory: true
  assets:
    targets:
      - bucket: 
          Ref: S3Bucket
        acl: public-read
        files:
          - source: ./dist/
            globs: '**/*.*'
            empty: true

    # vpc: vpc-ea6db38c
    # vpce:

frameworkVersion: ">=1.47.0 <2.0.0"

plugins:
  - serverless-webpack
  - serverless-export-env
  - serverless-s3-deploy
  - serverless-offline

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  runtime: nodejs10.x
  environment:
    SERVICES_TABLE: ${self:custom.uptime.servicesTable.name}
    METRICS_TABLE: ${self:custom.uptime.metricsTable.name}
    LOG_GROUP: /aws/lambda/${self:custom.uptime.prefix}-pinger
    API_URL: { "Fn::Join" : ["", [ "https://", { "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}" ] ] }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - "Fn::GetAtt": [ ServicesTable, Arn ]
        - "Fn::GetAtt": [ MetricsTable, Arn ]

functions:

  api:
    handler: src/app/api.handler
    memorySize: 256
    timeout: 6
    events:
      - http: 
          path: / # this matches the base path
          method: ANY
          cors: true
      - http:
          path: /{any+} # this matches any path, the token 'any' doesn't mean anything special
          method: ANY
          cors: true

  pinger:
    handler: src/app/pinger.handler
    memorySize: 256
    timeout: 45
    events:
      - schedule:
          name: ${self:custom.uptime.prefix}-scheduled-pinger-1-minute
          description: 'The uptime pinger, which runs checks on a schedule (1 minute)'
          rate: cron(* * * * ? *)
          inputTransformer:
            inputPathsMap:
              eventId: '$.id'
              eventTime: '$.time'
            inputTemplate: '{"id": <eventId>, "time": <eventTime>, "rate": "1 minute"}'
      - schedule:
          name: ${self:custom.uptime.prefix}-scheduled-pinger-5-minutes
          description: 'The uptime pinger, which runs checks on a schedule (5 minutes)'
          rate: cron(0/5 * * * ? *)
          inputTransformer:
            inputPathsMap:
              eventId: '$.id'
              eventTime: '$.time'
            inputTemplate: '{"id": <eventId>, "time": <eventTime>, "rate": "5 minutes"}'
      - schedule:
          name: ${self:custom.uptime.prefix}-scheduled-pinger-15-minutes
          description: 'The uptime pinger, which runs checks on a schedule (15 minutes)'
          rate: cron(0/15 * * * ? *)
          inputTransformer:
            inputPathsMap:
              eventId: '$.id'
              eventTime: '$.time'
            inputTemplate: '{"id": <eventId>, "time": <eventTime>, "rate": "15 minutes"}'
      - schedule:
          name: ${self:custom.uptime.prefix}-scheduled-pinger-30-minutes
          description: 'The uptime pinger, which runs checks on a schedule (30 minutes)'
          rate: cron(0/30 * * * ? *)
          inputTransformer:
            inputPathsMap:
              eventId: '$.id'
              eventTime: '$.time'
            inputTemplate: '{"id": <eventId>, "time": <eventTime>, "rate": "30 minutes"}'
      - schedule:
          name: ${self:custom.uptime.prefix}-scheduled-pinger-1-hour
          description: 'The uptime pinger, which runs checks on a schedule (1 hour)'
          rate: cron(0 * * * ? *)
          inputTransformer:
            inputPathsMap:
              eventId: '$.id'
              eventTime: '$.time'
            inputTemplate: '{"id": <eventId>, "time": <eventTime>, "rate": "1 hour"}'

package:
  individually: true

resources:
  - ${file(src/aws/s3-${self:custom.uptime.privacy}.yml)}
  - ${file(src/aws/dynamodb.yml)}
